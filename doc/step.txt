一、开发前准备
    1、新建表：t_user
    2、添加依赖：
        1）、mybatis
        2）、mysql-connector-java

二、参考官方文档，新建Mybatis全局配置文件（主配置文件）mybatis-config.xml
    1、拷贝mybatis-3-config.dtd约束(在无网络情况下可去官网下载好对应dtd文件，通过XML Catalog配置)
    2、环境配置
        1）、事务管理器配置
        2）、数据源配置
    3、关联映射文件mapper.xml

三、mapper.xml映射文件编写
    1、拷贝mybatis-3-mapper.dtd约束
    2、编写mapper + namespace
    3、编写对应的SQL语句

四、编写测试类AppTest
    1、前提：操作mybatis，需要一个连接对象SqlSession（会话）
    2、如何构建SqlSession？ 逆向推到:SqlSession <- SqlSessionFactory <- SqlSessionFactoryBuilder <- 通过流对象InputStream创建 <- 读取mybatis-config.xml文件获取流对象
        1）、这里需要注意的是：IDEA的Maven是不会编译src的java目录的xml文件，所以在Mybatis的配置文件中找不到xml文件！
            解决方案：①不将xml放到src目录下面，将xxxMapper.xml放到Maven构建的resource目录下面！
                     ②在Maven的pom文件中，添加下面代码： <build>
                                                          <resources>
                                                              <resource>
                                                                  <directory>src/main/java</directory>
                                                                  <includes>
                                                                      <include>**/*.xml</include>
                                                                  </includes>
                                                              </resource>
                                                          </resources>
                                                       </build>
        2）、连接数据源DataSource时：
            ①、如果MySQL的驱动包为8以上的，driver的value值为com.mysql.cj.jdbc.Driver，而非com.mysql.jdbc.Driver，
                日志显示说该类已弃用（This is deprecated），可到jar包查询该类，无惨构造器会抛出SQLException异常，并打印相关信息。
            ②、系统时区的错误，可通过 show VARIABLES like "%time_zone%" 查看，默认为SYSTEM。
                解决方案：1、url的value值后面加上参数serverTimezone=GMT；
                           2、设置mysql的时区：MySQL默认的时区是UTC时区
                                            （1）永久的修改：修改mysql的配置文件，添加：default-time-zone='+08:00'，重启mysql生效
                                            （2）临时的修改：执行mysql命令 set global time_zone='+08:00'，立即生效，重启mysql后失效

五、日志框架（Log4j）配置，参考Mybatis文档
    1、Log4j 根配置语法（全局配置）
        log4j.rootLogger=[level], appenderName, appenderName, …
        把指定级别以上的日志信息输出到指定的一个或者多个位置，level：ERROR > WARN > INFO > DEBUG > TRACE
    2、针对不同包、类、方法的日志个性化配置（自定义配置）
        log4j.logger.+包、类、方法名=[level]
    3、日志输出目的地及格式配置
        log4j.appender.+

六、OGNL表达式(Mapper中的parameterType可以不写，Mybatis可以推断出)
    1、OGNL是Object-Graph Navigation Language的缩写，对象图导航语言
    2、OGNL语法：#{}
    3、如果当前上下文对象是JavaBean对象，#{X}中的X为属性名称
       如果当前上下文对象是Map对象，#{X}中的X为Map中的key
       如果当前上下文对象是简单类型对象（基本类型+String），#{X}中的X可为任意内容，因为mybatis可以自动判断出来

七、抽取MyBatisUtil，减少重复代码（主要是创建SqlSession的代码重复）
    抽取创建SqlSession的代码需要注意：作用域（Scope）和生命周期 -> 不同作用域和生命周期类是至关重要的，因为错误的使用会导致非常严重的并发问题。
    1、SqlSessionFactoryBuilder：这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了
    2、SqlSessionFactory：一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例
    3、SqlSession：每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。

八、测试update、delete、insert操作
    1、创建UpdateTest测试类，编写相应SQL

九、Mybatis的typeAlias配置（用来减少类完全限定名的冗余）
    1、自定义别名
        1）、对于某一个类设置别名，在全局配置文件中设置：
            <typeAliases>
                <typeAlias alias="User" type="com.mxz.mybatis.domain.User"/>
            </typeAliases>
        2）、对于某一个包下的所有类设置别名：（默认的别名是简单类名首字母小写，但其实Mybatis的别名是不区分大小写的）
            <typeAliases>
                <package name="com.mxz.mybatis.domain"/>
            </typeAliases>
        3）、注解设置别名（可用于解决已经为某个包下类设置别名的，但有不同子包同类名的情况，自定义别名）
            @Alias("User")
    2、系统自带别名
        如：
            别名	    映射的类型
            _byte	    byte
            _int	    int
            int	        Integer

十、Mybatis的properties属性配置
    1、通过mybatis-config.xml中配置properties 元素的子元素来传递
    2、通过mybatis-config.xml中引入外部文件进行加载

十一、Mybatis的resultMap配置（解决结果集的列名（表字段名）和对象属性名不匹配问题）
    1、新建表t_user_new，字段分别为u_id，u_name，u_salary
    2、新建UserNewMapper.xml文件，并添加到mybatis-config.xml的mappers元素中
    3、新建ResultMap测试类

十二、Mybatis的Mapper接口与原理
    之前执行SQL的时候，是通过namespace+id的方式找到SQL，该方式存在几个问题：User user = session.selectOne("com.mxz.mybatis.mapper.UserMapper.get", 1L);
        1、因为传入的是String类型的参数，所有可能会写错，而一旦写错只有在运行时才能发现
        2、因为在SQLSession中传递的参数类型都是Object类型，所有传入的Mybatis需要的参数类型是不被检查的
        3、每一个操作的代码模板其实是相同的（代码冗余）
    解决方案：
        使用Mapper接口，类似于DAO接口，在Mapper接口中去定义每一个操作方法。
    1)新建表t_student
    2)在mapper包中创建StudentMapper.xml文件，并添加到mybatis-config.xml的mappers元素中
    3)在mapper包中创建StudentMapper interface接口
        （Mapper组件：Mapper接口 + Mapper文件）
        （Mapper接口和Mapper文件，应该放到同一个包中）
        （Mapper文件中的namespace，设置为对应Mapper接口的全限定名称，
        Mapper文件中的操作元素的id，设置为对应Mapper接口中的方法名称 -> 于是Mapper.xml文件的namespace + id即为对应Mapper接口方法的全限定名称）
    原理：动态代理
    模拟动态代理->新建MyMapperProxy类

十三、Mybatis的参数处理
    解决Mybatis只能接收一个参数的问题：
    Object selectOne(String statement, Object parameterObject)
        方式一：封装POJO（简单的Java对象），缺点：需要定义很多的JaveBean，很烦
        方式二：封装Map对象，Map的key好比是JavaBean的属性名称，Map的value好比是JavaBean的属性值，麻烦，每次都要创建Map
        方法三：使用@Param注解，底层原理就是方式二，Mybatis帮助我们使用Map来封装。

十四、Mybatis的#和$
    打印SQL的区别：
        使用#：
            Preparing: select id, username, password from t_client where username = ? and password = ?
            Parameters: admin(String), 123456(String)
        使用#：
            Preparing: select id, username, password from t_client where username = admin and password = 123456
            Parameters:
        #和$符号的异同：
            相同：都可以通过#和$来获取对象中的信息
            不同：
                使用#传递的参数会先转换为占位符？，再通过设置占位符参数的方法来设置值（统统会给值使用单引号''引起来）。
                使用$传递的参数，直接把解析数据作为SQL语句的一部分。
            推论：
                #：好比使用的PreparedStatement，不会导致SQL注入的问题，相对比较安全。
                $：好比使用的Statement，可能会导致SQL注入问题，相对不安全。
            如何选择：
                1、如果需要设置占位符参数的地方，区别使用#，也就是SQL之后可以使用？的情况。
                2、如果我们写的内容应该作为SQL的一部分，此时应该使用$，比如要排序，分组查询等。

十五、Mybatis注解开发
    开发和配置Mybatis框架：
        方式一：使用XML配置，把SQL和映射写在XML文件中。（推荐）
        方式二：使用注解配置，把SQL和映射写在Java代码中（Mapper接口）（不推荐）
    新建StudentAnnotationMapper接口类，并添加到mybatis-config.xml文件中的mappers属性中：<mapper class="com.mxz.mybatis.mapper.StudentAnnotationMapper"/>；
    新建AnnotationTest测试类；

十六、动态SQL之if和choose
    1、新建Employee等相关类

十七、动态SQL之where和set以及trim
    1、where元素：判断查询条件是否有WHERE关键字，如果没有，则在第一个查询条件之前，插入一个WHERE关键字。
                 如果发现查询条件以AND 或者 OR开头，也会把第一个查询条件的AND |OR 替换成WHERE。
                 （该元素解决不用写WHERE 1 = 1 的查询条件，而且WHERE 1 = 1 有可能会影响性能，不能使用索引）
    2、set元素：和where元素类型，根据set中的SQL动态地去掉最后的一个逗号，并在最前面加上一个set关键字，
               如果set元素下没有内容，会自动忽略set语句。
    3、trim元素：<trim prefix="" prefixOverrides="" suffix="" suffixOverrides="">
                    ...
                </trim>
                前提：如果trim元素包含内容，则返回一个字符串：
                    prefix：在这个字符串之前插入prefix属性值。
                        prefixOverrides：并且如果字符串的内容以prefixOverrides的内容开头（可以包含管道符号|），那么使用prefix属性值替换内容的开头。
                    suffix：在这个字符串之后插入suffix属性值。
                        suffixOverrides：并且字符串的内容以suffixOverrides中的内容结尾（可以包含管道符号|），那么使用suffix属性值替换内容的结尾。
    改造where元素：如果条件以AND或OR开头，就应该替换成WHERE
        <trim prefix="WHERE" prefixOverrides="AND |OR">
            ...
        </trim>
    改造set元素：在所有的条件之前插入一个set关键字，把最后一个条件后面的逗号去掉
            <trim prefix="SET" suffixOverrides=",">
                ...
            </trim>