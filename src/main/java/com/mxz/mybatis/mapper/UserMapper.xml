<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 不同的mapper文件namespace是不同的-->
<mapper namespace="com.mxz.mybatis.mapper.UserMapper">

    <!--
        select元素：专门用来做写查询的SQL
        id属性：做唯一标识，用来表示某一天SQL语句
            id属性和mapper的namespace唯一的表示了应用中的某一条SQL语句
        parameterType属性：表示执行该SQL语句需要的参数的类型，建议不写， MyBatis 可以通过类型处理器（TypeHandler） 推断出来
        resultType属性：把结果集中的每一行数据封装成什么类型的对象
    -->
    <select id="get" parameterType="java.lang.Long" resultType="com.mxz.mybatis.domain.User">
        select id, name, salary from t_user where id = #{id}
    </select>

    <select id="ListAll" resultType="com.mxz.mybatis.domain.User">
        select id, name, salary from t_user
    </select>

    <!-- 修改操作-->
    <update id="update">
        update t_user set name = #{name}, salary = #{salary} where id = #{id}
    </update>

    <!-- 删除操作 -->
    <delete id="delete">
        delete from t_user where id = #{id}
    </delete>

    <!--
        新增操作
        insert元素：
            useGeneratedKeys属性：是否需要返回自动生成的主键
            keyProperty属性：把自动生成的主键值设置到对象的哪个属性上
    -->
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into t_user (name, salary) values (#{name}, #{salary})
    </insert>

    <!-- 测试实体类别名 -->
    <select id="testAlias" resultType="User">
        select id, name, salary from t_user where id = #{id}
    </select>

    <!-- 测试系统自带别名-->
    <select id="queryForCount" resultType="int">
        select count(1) from t_user
    </select>

    <select id="testMap1" resultType="map">
        select id, name from t_user where id = #{id}
    </select>
    <select id="testMap2" resultType="User">
        select id, name from t_user where id = #{id}
    </select>

</mapper>